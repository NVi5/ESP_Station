# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:

- task: DockerInstaller@0
  inputs:
    dockerVersion: '20.10.5'

- script: docker run -v $PWD:/project -w /project espressif/idf idf.py build -DSSID="$(WIFISSID)" -DPASS="$(WIFIPASS)" -DBUILD_VERSION=$(Build.BuildId)
  displayName: 'BuildProject'

- task: PowerShell@2
  displayName: 'PrepareArtifacts'
  inputs:
    targetType: 'inline'
    script: |
      Copy-Item -Path "build/esp32.bin" -Destination "$(Build.ArtifactStagingDirectory)"
      New-Item "$(Build.ArtifactStagingDirectory)\latestBuildVersion.txt" -ItemType File -Value "$(Build.BuildId)"

- task: FtpUpload@2
  inputs:
    credentialsOption: 'inputs'
    serverUrl: '$(FTPURL)'
    username: '$(FTPUSER)'
    password: '$(FTPPASS)'
    rootDirectory: '$(Build.ArtifactStagingDirectory)'
    filePatterns: '**'
    remoteDirectory: '/public_html/uploads'
    clean: true
    preservePaths: false
    trustSSL: false

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'